// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Collection {
    id        String   @id
    createdAt DateTime @default(now())

    name             String
    description      String
    producerId       String
    confirmed        Boolean @default(false)
    gameplayPriceRef String

    producer  Producer           @relation(fields: [producerId], references: [id], onDelete: Cascade)
    cards     Card[]
    profit    CollectionProfit[]
    gameplays Gameplay[]

    @@unique([name, producerId])
}

model CollectionProfit {
    collectionId String
    period       DateTime //@db.Date
    updatedAt    DateTime @default(now())
    profit       Decimal

    // NOTE: needed for optimization of some queries...
    producerId String

    collection Collection @relation(fields: [collectionId], references: [id])

    // collection Collection 
    @@id([collectionId, period])
}

model Card {
    id String @id

    name         String
    url          String
    collectionId String
    embeddedAt   DateTime?

    collection Collection     @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    consumers  ConsumerCard[]
    gameplays  Gameplay[]

    @@unique([name, collectionId])
}

// TODO: add payment information
model Producer {
    id String @id

    user        User         @relation(fields: [id], references: [id], onDelete: Cascade)
    collections Collection[]
}

model Consumer {
    id String @id

    credits         BigInt
    creditsCurrency String

    user      User             @relation(fields: [id], references: [id], onDelete: Cascade)
    deck      ConsumerCard[]
    purchases CreditPurchase[]
    gameplays Gameplay[]
}

model ConsumerCard {
    consumerId String
    cardId     String

    createdAt DateTime @default(now())

    consumer Consumer @relation(fields: [consumerId], references: [id], onDelete: Cascade)
    card     Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

    @@id([consumerId, cardId])
}

model CreditPurchase {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    consumerId     String
    transactionRef String

    consumer Consumer? @relation(fields: [consumerId], references: [id], onDelete: NoAction)
}

model Gameplay {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    consumerId   String
    collectionId String
    cardId       String

    consumer   Consumer   @relation(fields: [consumerId], references: [id], onDelete: NoAction)
    collection Collection @relation(fields: [collectionId], references: [id], onDelete: NoAction)
    card       Card       @relation(fields: [cardId], references: [id], onDelete: NoAction)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    producer      Producer?
    consumer      Consumer?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
